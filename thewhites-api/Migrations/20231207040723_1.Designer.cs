// <auto-generated />
using System;
using AspTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace asp_testing.Migrations
{
    [DbContext(typeof(AspDbContext))]
    [Migration("20231207040723_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("AspTest.Models.Bedrijf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Locatie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.ToTable("Bedrijven");
                });

            modelBuilder.Entity("AspTest.Models.Beperking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Beperkingen");
                });

            modelBuilder.Entity("AspTest.Models.Ervaringsdeskundige", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefoonnummer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.ToTable("Ervaringsdeskundigen");
                });

            modelBuilder.Entity("AspTest.Models.ErvaringsdeskundigeBeperking", b =>
                {
                    b.Property<int>("BeperkingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErvaringsdeskundigeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BeperkingId", "ErvaringsdeskundigeId");

                    b.HasIndex("ErvaringsdeskundigeId");

                    b.ToTable("ErvaringsdeskundigeBeperkingen");
                });

            modelBuilder.Entity("AspTest.Models.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Emailadres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Gebruikers");
                });

            modelBuilder.Entity("AspTest.Models.Notificatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("datum")
                        .HasColumnType("TEXT");

                    b.Property<bool>("status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.ToTable("Notificaties");
                });

            modelBuilder.Entity("AspTest.Models.Bedrijf", b =>
                {
                    b.HasOne("AspTest.Models.Gebruiker", "Gebruiker")
                        .WithMany()
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("AspTest.Models.Ervaringsdeskundige", b =>
                {
                    b.HasOne("AspTest.Models.Gebruiker", "Gebruiker")
                        .WithMany()
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("AspTest.Models.ErvaringsdeskundigeBeperking", b =>
                {
                    b.HasOne("AspTest.Models.Beperking", "Beperking")
                        .WithMany("ErvaringsdeskundigeBeperkingen")
                        .HasForeignKey("BeperkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspTest.Models.Ervaringsdeskundige", "Ervaringsdeskundige")
                        .WithMany("ErvaringsdeskundigeBeperkingen")
                        .HasForeignKey("ErvaringsdeskundigeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beperking");

                    b.Navigation("Ervaringsdeskundige");
                });

            modelBuilder.Entity("AspTest.Models.Notificatie", b =>
                {
                    b.HasOne("AspTest.Models.Gebruiker", "Gebruiker")
                        .WithMany("Notificaties")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("AspTest.Models.Beperking", b =>
                {
                    b.Navigation("ErvaringsdeskundigeBeperkingen");
                });

            modelBuilder.Entity("AspTest.Models.Ervaringsdeskundige", b =>
                {
                    b.Navigation("ErvaringsdeskundigeBeperkingen");
                });

            modelBuilder.Entity("AspTest.Models.Gebruiker", b =>
                {
                    b.Navigation("Notificaties");
                });
#pragma warning restore 612, 618
        }
    }
}
